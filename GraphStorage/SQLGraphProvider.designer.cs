#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldGraph.GraphStorage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="world_idea_graph")]
	internal partial class SQLGraphProviderDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEdge(Edge instance);
    partial void UpdateEdge(Edge instance);
    partial void DeleteEdge(Edge instance);
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertNodeTag(NodeTag instance);
    partial void UpdateNodeTag(NodeTag instance);
    partial void DeleteNodeTag(NodeTag instance);
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public SQLGraphProviderDataContext() : 
				base(global::WorldGraph.GraphStorage.Properties.Settings.Default.world_idea_graphConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLGraphProviderDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLGraphProviderDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLGraphProviderDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLGraphProviderDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Edge> Edges
		{
			get
			{
				return this.GetTable<Edge>();
			}
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<NodeTag> NodeTags
		{
			get
			{
				return this.GetTable<NodeTag>();
			}
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Edges")]
	public partial class Edge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NodeFrom;
		
		private int _NodeTo;
		
		private EntityRef<Node> _Node;
		
		private EntityRef<Node> _Node1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNodeFromChanging(int value);
    partial void OnNodeFromChanged();
    partial void OnNodeToChanging(int value);
    partial void OnNodeToChanged();
    #endregion
		
		public Edge()
		{
			this._Node = default(EntityRef<Node>);
			this._Node1 = default(EntityRef<Node>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeFrom", DbType="Int NOT NULL")]
		public int NodeFrom
		{
			get
			{
				return this._NodeFrom;
			}
			set
			{
				if ((this._NodeFrom != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeFromChanging(value);
					this.SendPropertyChanging();
					this._NodeFrom = value;
					this.SendPropertyChanged("NodeFrom");
					this.OnNodeFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTo", DbType="Int NOT NULL")]
		public int NodeTo
		{
			get
			{
				return this._NodeTo;
			}
			set
			{
				if ((this._NodeTo != value))
				{
					if (this._Node1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeToChanging(value);
					this.SendPropertyChanging();
					this._NodeTo = value;
					this.SendPropertyChanged("NodeTo");
					this.OnNodeToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Edge", Storage="_Node", ThisKey="NodeFrom", OtherKey="Id", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.Edges.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.Edges.Add(this);
						this._NodeFrom = value.Id;
					}
					else
					{
						this._NodeFrom = default(int);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Edge1", Storage="_Node1", ThisKey="NodeTo", OtherKey="Id", IsForeignKey=true)]
		public Node Node1
		{
			get
			{
				return this._Node1.Entity;
			}
			set
			{
				Node previousValue = this._Node1.Entity;
				if (((previousValue != value) 
							|| (this._Node1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node1.Entity = null;
						previousValue.Edges1.Remove(this);
					}
					this._Node1.Entity = value;
					if ((value != null))
					{
						value.Edges1.Add(this);
						this._NodeTo = value.Id;
					}
					else
					{
						this._NodeTo = default(int);
					}
					this.SendPropertyChanged("Node1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nodes")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Subject;
		
		private string _Description;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Century;
		
		private System.Nullable<int> _PlaceId;
		
		private EntitySet<Edge> _Edges;
		
		private EntitySet<Edge> _Edges1;
		
		private EntitySet<NodeTag> _NodeTags;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnCenturyChanging(System.Nullable<int> value);
    partial void OnCenturyChanged();
    partial void OnPlaceIdChanging(System.Nullable<int> value);
    partial void OnPlaceIdChanged();
    #endregion
		
		public Node()
		{
			this._Edges = new EntitySet<Edge>(new Action<Edge>(this.attach_Edges), new Action<Edge>(this.detach_Edges));
			this._Edges1 = new EntitySet<Edge>(new Action<Edge>(this.attach_Edges1), new Action<Edge>(this.detach_Edges1));
			this._NodeTags = new EntitySet<NodeTag>(new Action<NodeTag>(this.attach_NodeTags), new Action<NodeTag>(this.detach_NodeTags));
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Century", DbType="Int")]
		public System.Nullable<int> Century
		{
			get
			{
				return this._Century;
			}
			set
			{
				if ((this._Century != value))
				{
					this.OnCenturyChanging(value);
					this.SendPropertyChanging();
					this._Century = value;
					this.SendPropertyChanged("Century");
					this.OnCenturyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceId", DbType="Int")]
		public System.Nullable<int> PlaceId
		{
			get
			{
				return this._PlaceId;
			}
			set
			{
				if ((this._PlaceId != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._PlaceId = value;
					this.SendPropertyChanged("PlaceId");
					this.OnPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Edge", Storage="_Edges", ThisKey="Id", OtherKey="NodeFrom")]
		public EntitySet<Edge> Edges
		{
			get
			{
				return this._Edges;
			}
			set
			{
				this._Edges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Edge1", Storage="_Edges1", ThisKey="Id", OtherKey="NodeTo")]
		public EntitySet<Edge> Edges1
		{
			get
			{
				return this._Edges1;
			}
			set
			{
				this._Edges1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_NodeTag", Storage="_NodeTags", ThisKey="Id", OtherKey="NodeId")]
		public EntitySet<NodeTag> NodeTags
		{
			get
			{
				return this._NodeTags;
			}
			set
			{
				this._NodeTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Node", Storage="_Place", ThisKey="PlaceId", OtherKey="Id", IsForeignKey=true)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._PlaceId = value.Id;
					}
					else
					{
						this._PlaceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Edges(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_Edges(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
		
		private void attach_Edges1(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = this;
		}
		
		private void detach_Edges1(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = null;
		}
		
		private void attach_NodeTags(NodeTag entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_NodeTags(NodeTag entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeTags")]
	public partial class NodeTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TagId;
		
		private int _NodeId;
		
		private EntityRef<Node> _Node;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnNodeIdChanging(int value);
    partial void OnNodeIdChanged();
    #endregion
		
		public NodeTag()
		{
			this._Node = default(EntityRef<Node>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIdChanging(value);
					this.SendPropertyChanging();
					this._NodeId = value;
					this.SendPropertyChanged("NodeId");
					this.OnNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_NodeTag", Storage="_Node", ThisKey="NodeId", OtherKey="Id", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.NodeTags.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.NodeTags.Add(this);
						this._NodeId = value.Id;
					}
					else
					{
						this._NodeId = default(int);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_NodeTag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.NodeTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.NodeTags.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Places")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _City;
		
		private string _Region;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Place()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(MAX)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(11,8)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Node", Storage="_Nodes", ThisKey="Id", OtherKey="PlaceId")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<NodeTag> _NodeTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Tag()
		{
			this._NodeTags = new EntitySet<NodeTag>(new Action<NodeTag>(this.attach_NodeTags), new Action<NodeTag>(this.detach_NodeTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_NodeTag", Storage="_NodeTags", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<NodeTag> NodeTags
		{
			get
			{
				return this._NodeTags;
			}
			set
			{
				this._NodeTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NodeTags(NodeTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_NodeTags(NodeTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
}
#pragma warning restore 1591
